# ~/.bashrc: executed by bash(1) for non-login shells.

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
# ... and ignore same sucessive entries.
export HISTCONTROL=ignoreboth

export EDITOR=vim

# my path, not yours
PATH="$HOME/bin"
PATH="$PATH:/usr/lib/ccache"                   # ccache symlinks on debian
PATH="$PATH:/usr/lib64/ccache"                 # ccache symlinks on CentOS (x86_64) 

ccache=$( echo /usr/local/Cellar/ccache/*/libexec )
[[ -e "$ccache" ]] && PATH="$PATH:$ccache"     # ccache symlinks on OSX (brew)

PATH="$PATH:$HOME/.gem/ruby/1.8/bin"           # ruby gems
PATH="$PATH:$HOME/hck/perl-5.12.1/bin"         # handbuilt perl
PATH="$PATH:/opt/local/bin:/opt/local/sbin"    # macports
PATH="$PATH:/opt/xt/xt-perl/bin"               # nap machines
PATH="$PATH:/usr/local/git/bin"                # http://code.google.com/p/git-osx-installer/
PATH="$PATH:/usr/local/bin:/usr/local/sbin"
PATH="$PATH:/usr/bin:/usr/sbin"
PATH="$PATH:/bin:/sbin"
export PATH

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

PS1='\033[1m[\D{%Y-%m-%d %H:%M:%S}] \u@\h:\w\033[0m\n\$ '

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|screen)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac

# append history
shopt -s histappend
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

# fuck you and your auto-suggesting ways
unset command_not_found_handle

# repopulate SSH_AUTH_SOCK so we can talk to the ssh-agent
AGENT=($(find /tmp -type s -name "agent.*" 2>/dev/null))
if [ -S ${AGENT} ] ; then
	export SSH_AUTH_SOCK=${AGENT}
fi
[ $( uname ) == "Darwin" ] && eval `launchctl export | grep SSH_AUTH_SOCK`

# xdg-open(1) on Linux, open(1) on OSX
[ $( uname ) == "Linux" ] && alias open=xdg-open


[[ -e /usr/local/bin/hub ]] && alias git=hub
alias vi=vim

# enable perlbrew     http://search.cpan.org/perldoc?perlbrew
[[ -s "$HOME/perl5/perlbrew/etc/bashrc" ]] && source "$HOME/perl5/perlbrew/etc/bashrc"

# enable local::lib   http://search.cpan.org/perldoc?local::lib
[[ -s "$HOME/perl5/lib/perl5/local/lib.pm" ]] && eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)

# enable rvm          http://rvm.beginrescueend.com/
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# enable pythonbrew   https://github.com/utahta/pythonbrew
[[ -s "$HOME/.pythonbrew/etc/bashrc" ]] && source "$HOME/.pythonbrew/etc/bashrc"

# clean out some broken vars
export -n LESS
export -n TMOUT


return # one day we may want programmable completion, but not soon

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi
